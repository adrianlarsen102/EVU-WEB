name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') && !startsWith(github.ref, 'refs/heads/release/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Clean up existing tags and branches
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate all possible next versions (patch, minor, major)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          PATCH_VERSION="v${major}.${minor}.$((patch + 1))"
          MINOR_VERSION="v${major}.$((minor + 1)).0"
          MAJOR_VERSION="v$((major + 1)).0.0"

          echo "Cleaning up potential tags: $PATCH_VERSION, $MINOR_VERSION, $MAJOR_VERSION"

          # Delete all possible next version tags
          for TAG_NAME in "$PATCH_VERSION" "$MINOR_VERSION" "$MAJOR_VERSION"; do
            git tag -d "$TAG_NAME" 2>/dev/null || true
            git push origin --delete "$TAG_NAME" 2>/dev/null || true
            git push origin --delete "release/$TAG_NAME" 2>/dev/null || true
          done

          echo "Cleanup complete"

      - name: Run release
        run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create release branch and push
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.version }}"

          # Delete remote branch if exists
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create and push new branch
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          git push --tags

          # Return to main branch for PR creation
          git checkout main

      - name: Create Pull Request (Manual Instructions)
        shell: bash
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH="release/v${VERSION}"
          REPO="${{ github.repository }}"

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Release v${VERSION} is ready!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📋 NEXT STEPS:"
          echo ""
          echo "1️⃣  Create Pull Request manually:"
          echo "   👉 https://github.com/${REPO}/compare/main...${BRANCH}?expand=1"
          echo ""
          echo "2️⃣  PR Title:"
          echo "   chore(release): v${VERSION}"
          echo ""
          echo "3️⃣  PR Description:"
          echo "   ## Release v${VERSION}"
          echo "   "
          echo "   Automated release created by GitHub Actions."
          echo "   "
          echo "   ### Changes"
          echo "   See [CHANGELOG.md](https://github.com/${REPO}/blob/${BRANCH}/CHANGELOG.md) for details."
          echo ""
          echo "4️⃣  After merging the PR, the GitHub Release will be created automatically."
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "⚙️  ALTERNATIVE: To enable automatic PR creation, add a Personal Access Token:"
          echo "   1. Go to: https://github.com/settings/tokens/new"
          echo "   2. Create a token with 'repo' scope"
          echo "   3. Add it as a secret named 'PAT' in your repository"
          echo "   4. Update the workflow to use secrets.PAT instead of secrets.GITHUB_TOKEN"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
