name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') && !startsWith(github.ref, 'refs/heads/release/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Clean up existing tags and branches
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate all possible next versions (patch, minor, major)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          PATCH_VERSION="v${major}.${minor}.$((patch + 1))"
          MINOR_VERSION="v${major}.$((minor + 1)).0"
          MAJOR_VERSION="v$((major + 1)).0.0"

          echo "Cleaning up potential tags: $PATCH_VERSION, $MINOR_VERSION, $MAJOR_VERSION"

          # Delete all possible next version tags
          for TAG_NAME in "$PATCH_VERSION" "$MINOR_VERSION" "$MAJOR_VERSION"; do
            git tag -d "$TAG_NAME" 2>/dev/null || true
            git push origin --delete "$TAG_NAME" 2>/dev/null || true
            git push origin --delete "release/$TAG_NAME" 2>/dev/null || true
          done

          echo "Cleanup complete"

      - name: Run release
        run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create release branch and push
        run: |
          BRANCH_NAME="release/v${{ steps.version.outputs.version }}"

          # Delete remote branch if exists
          git push origin --delete "$BRANCH_NAME" 2>/dev/null || true

          # Create and push new branch
          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"
          git push --tags

          # Return to main branch for PR creation
          git checkout main

      - name: Create Pull Request
        run: |
          # Create PR without labels (labels may not exist)
          PR_URL=$(gh pr create \
            --base main \
            --head "release/v${{ steps.version.outputs.version }}" \
            --title "chore(release): v${{ steps.version.outputs.version }}" \
            --body "## Release v${{ steps.version.outputs.version }}

          Automated release created by GitHub Actions.

          ### Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/release/v${{ steps.version.outputs.version }}/CHANGELOG.md) for details.

          ---
          **Auto-merge:** Please review and merge this PR to complete the release." \
            --assignee "${{ github.actor }}" 2>&1)

          echo "Pull Request created: $PR_URL"

          # Try to add labels (ignore if they don't exist)
          PR_NUMBER=$(echo "$PR_URL" | grep -oP '\d+$' || echo "")
          if [ -n "$PR_NUMBER" ]; then
            gh pr edit "$PR_NUMBER" --add-label "release" 2>/dev/null || echo "⚠️ Could not add 'release' label (label may not exist)"
            gh pr edit "$PR_NUMBER" --add-label "automated" 2>/dev/null || echo "⚠️ Could not add 'automated' label (label may not exist)"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
